<h2 id="connect-your-first-light-introduction">Introduction</h2>

<%= image_tag('connect-your-first-light/raspberry-pi/overview.jpg', class: 'img-thumbnail') %>

<p>
  This tutorial will show you how to control and monitor a simple light by connecting a Raspberry
  Pi to Lelylan using <a href="http://mqtt.org/" target="blank">MQTT</a>,
  a publish/subscribe messaging protocol enabling your Raspberry Pi to receive and send messages
  in a simple and transparent way.
</p>


<h2 id="connect-your-first-light-components">Components</h2>

<p>
  To connect your first light you need a Raspberry Pi connected to the Internet, either via
  ethernet (Model B) or via WiFi using a compatible WiFi USB dongle.
  For a comprehensive list of supported WiFi USB dongles see
  <a href="http://elinux.org/RPi_USB_Wi-Fi_Adapters" target="blank">RPi USB Wi-Fi Adapters</a>.
  Follows a list with the needed components to reach the final result.<br/>
  Note: to configure network access on your Raspberry Pi have a look at <a href="#">this tutorial</a>.
<p>

<table class="table table-stripped table-hover">
  <thead>
    <tr>
      <th>Components</th>
      <th>Buy</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://www.raspberrypi.org/faqs">Raspberry Pi (Model B)</a></td>
      <td><a href="http://export.farnell.com/rp/order/">Farnell</a></td>
      <td>$35.00</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="http://www.edimax.co.uk/en/produce_detail.php?pd_id=328&pl1_id=1&pl2_id=44">Edimax EW-7811Un</a> (optional)</td>
      <td><a href="http://www.amazon.com/Edimax-EW-7811Un-Wireless-Adapter-Wizard/dp/B003MTTJOY">Amazon</a></td>
      <td>$10.00</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/97">Push button</a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/9590">Any led</a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/8374">10K Ohm resistor</a></td>
      <td><a href="https://www.sparkfun.com/products/10969">Resistor kit</a></td>
      <td>$0.25</td>
      <td>1</td>
    </tr>
  </tbody>
</table>


<h2 id="connect-your-first-light-libraries">Libraries</h2>

<p>
  To develop on your Raspberry Pi you need to install a compatible GNU/Linux distribution
  from the <a href="http://www.raspberrypi.org/downloads">Raw Images</a> list section
  by following <a href="http://elinux.org/RPi_Easy_SD_Card_Setup">this guide</a>.
</p>

<p>
  You should also install the <code>python-mosquitto</code> library which allows you to
  build MQTT clients in Python.
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
$ sudo apt-get install python-mosquitto
</xmp>
</pre>
</div>


<h2 id="connect-your-first-light-hardware-setup">Hardware Setup</h2>

<p>
This example demonstrates the use of a pushbutton as a switch. Each time you press
the button, the LED is turned on (if it's off) or off (if on).
</p>

<%= image_tag('connect-your-first-light/raspberry-pi/lelylan_raspy.png', class: 'img-thumbnail') %>


<h2 id="connect-your-first-light-lelylan-setup">Lelylan Setup</h2>

<p>
  To create a new device open the <a href="http://manage.lelylan.com">Dashboard</a>.
  Click the <a href="http://manage.lelylan.com/new">create device</a> link and fill the
  form with the desired device name and choosing <code>Basic Light</code> as type.
<p>

<a href="http://manage.lelylan.com/new">
  <%= image_tag('connect-your-first-light/create-device.png', class: 'img-thumbnail') %>
</a>

<p>
  When created, you'll see a detailed view of your new device. Click on <code>settings</code>
  and you'll find all needed info to connect your hardware to Lelylan.
</p>

<ul>
  <li><code>Type</code> - Link to the type definition (to see the device properties).</li>
  <li><code>ID</code> - Unique device identifier.</li>
  <li><code>Secret</code> - Device secret code used to authenticate the communication with Lelylan.</li>
</ul>

<h3>Connect Lelylan to the Physical World</h3>

<p>
  To communicate with the physical device you need to connect Lelylan with the
  MQTT client. To make this possible use the <em>Nodes Service</em>,
  which is in charge of forwarding all incoming requests from Lelylan to
  the MQTT client.
</p>

<p>
  To use the Nodes Service you need to set in the physical
  field of your device a URI having the structure
  <code>http://nodes.lelylan.com/mqtt/devices/&lt;device-id&gt;</code>,
  where you need to change the <code>&lt;device-id&gt;</code> with your
  actual device id.
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td>Your Device ID</td>
      <td><code>518be5a700045e1521000001</code></td>
    </tr>
    <tr>
      <td>Your Physical URI</td>
      <td><code><span class="glyphicon glyphicon-arrow-right"></span> http://nodes.lelylan.com/mqtt/devices/518be5a700045e1521000001</code></td>
    </tr>
  </tbody>
</table>


<h2 id="connect-your-first-light-code">Raspberry Pi Code</h2>

<p>
  Here is the python script. To make it work set the <code>device_id</code>
  and the <code>device_secret</code> to your device credentials, save it to
  a file named <code>lelylan_led.py</code> and run it as super user:
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
$ sudo python lelylan_led.py
</xmp>
</pre>
</div>

<div class="alert alert-info">
  <p>
    <span class="label label-lelylan">notice</span>
    In order to make this python script work you need to substitute <code><DEVICE-ID></code>,
    <code><DEVICE-SECRET></code>, and <code><CLIENT-ID></code> with your actual credentials.
    To get all the needed information access the device settings section.
  </p>
</div>

<div class="code-block">
<pre class="prettyprint">
<xmp>
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BOARD)
GPIO.cleanup()
# led pin setup
GPIO.setup(7, GPIO.OUT)
# button pin setup
GPIO.setup(12, GPIO.IN)

import mosquitto, json, time

# event callbacks
def on_connect(obj, rc):
    print('Connected, rc: ' + str(rc))

def on_message(obj, msg):
    json_data = msg.payload
    client.publish(out_topic, json_data)
    value = json.loads(json_data)['properties'][0]['value']
    if value == 'on':
        GPIO.output(7, GPIO.HIGH)
    else:
        GPIO.output(7, GPIO.LOW)

def on_subscribe(mosq, obj, mid):
    print('Subscribed: ' + str(mid))

# create client
client = mosquitto.Mosquitto('<CLIENT-ID>')

# assign event callbacks
client.on_message = on_message
client.on_connect = on_connect
client.on_subscribe = on_subscribe

# device credentials
device_id     = '<DEVICE-ID>'
device_secret = '<DEVICE-SECRET>'

# device topics
in_topic  = 'devices/' + device_id + '/get'  # receiving messages
out_topic = 'devices/' + device_id + '/set'  # publishing messages

# client connection
client.username_pw_set(device_id, device_secret)
client.connect('96.126.109.170')

# subscribe (with QoS level 0)
client.subscribe(in_topic, 0)

prev_status = GPIO.LOW
updated_at = 0  # the last time the output pin was toggled
debounce = 0.2  # the debounce time, increase if the output flickers

# Continue the network loop, exit when an error occurs
rc = 0
while rc == 0:
    rc = client.loop()
    button = GPIO.input(12)

    if button != prev_status and time.time() - updated_at > debounce:
        prev_status = button
        updated_at = time.time()

        button_payload = 'off'
        if button == GPIO.HIGH:
            button_payload = 'on'

        # effectively update the light status
        GPIO.output(7, button)
        payload = { 'properties': [{ 'id': '518be5a700045e1521000001', 'value': button_payload }] }
        client.publish(out_topic, json.dumps(payload))

print('rc: ' + str(rc))
</xmp>
</pre>
</div>


<h2 id="connect-your-first-light-control">Control your light</h2>

<p>
Now that all the components are ready and your Raspberry Pi is connected to Lelylan access the
<a href="http://manage.lelylan.com">Lelylan Dashboard</a>. From here you can control your light
and get realtime notifications.
</p>

<a href="http://manage.lelylan.com">
<%= image_tag('connect-your-first-light/dashboard.png', class: 'img-thumbnail') %>
</a>


<h2 id="connect-your-first-light-code-explained">Code Explained</h2>

<p>
  To better understand how the python script works we'll give you a brief
  description of what the most important code sections do.
</p>

<h3>GPIO Setup</h3>

<p>
  Set GPIO mode to <code>BOARD</code> and set pin mode for the led and the button pins.
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
import RPi.GPIO as GPIO  # import GPIO library

GPIO.setmode(GPIO.BOARD) # use P1 header pin numbering convention
GPIO.cleanup()           # clean up resources
GPIO.setup(7, GPIO.OUT)  # led pin setup
GPIO.setup(12, GPIO.IN)  # button pin setup
</xmp>
</pre>
</div>

<h3>MQTT Callbacks</h3>

<p>
  Define callback functions for connection, ...
  TODO
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
def on_connect(obj, rc):
    print('Connected, rc: ' + str(rc))
</xmp>
</pre>
</div>

<h3>Device Credentials</h3>

<p>
  The <code>device_id</code> and <code>device_secret</code> are used to let the Raspberry Pi
  understand which one is the communicating device on Lelylan. To get the device
  credentials open the <a href="http://manage.lelylan.com">Dashboard</a>, select the
  desired device, click on settings and copy the Device ID and the Device Secret.
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
device_id     = '<DEVICE-ID>'      # set your device id (will be the MQTT client username)
device_secret = '<DEVICE-SECRET>'  # set your device secret (will be the MQTT client password)
</xmp>
</pre>
</div>

<h3>MQTT Topics</h3>

<p>
  To communicate with Lelylan, Raspberry Pi must set the <code>in_topic</code> (used to receive
  messages from Lelylan) and the <code>out_topic</code> (used to publish messages to Lelylan).
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
in_topic  = 'devices/' + device_id + '/get'  # where physical updates are published
out_topic = 'devices/' + device_id + '/set'  # where lelylan updates are received
</xmp>
</pre>
</div>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  To deeply understand how MQTT works check out the <a href="/makers#mqtt">MQTT API</a>.
  </p>
</div>

<h3>MQTT Access Settings</h3>

<p>
  Create a new MQTT client with a MQTT client ID, a random string not longer than 23 bytes
  used to identify your Raspberry Pi.
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
client = mosquitto.Mosquitto('<CLIENT-ID>') # MQTT client id (random, max 23 bytes)
</xmp>
</pre>
</div>

<p>
  Set the Lelylan MQTT server credentials and the MQTT server IP where to connect.
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
client.username_pw_set(device_id, device_secret) # MQTT server credentials
client.connect('96.126.109.170')                 # MQTT server address
</xmp>
</pre>
</div>

<h3>MQTT Signatures</h3>

<p>
  To communicate with Lelylan Raspberry Pi needs to initialize the MQTT client
  connecting to the MQTT server. The needed params to make this initialization are
  the MQTT server address, the MQTT server port, a callback function called every
  time a message is received from Lelylan and the ethernet client.

  TODO...
</p>

<div class="code-block">
<pre class="prettyprint">
<xmp>
void callback(char* topic, byte* payload, unsigned int length); // subscription callback
PubSubClient client(server, 1883, callback, ethClient); // mqtt client

# assign event callbacks
client.on_message = on_message
client.on_connect = on_connect
client.on_subscribe = on_subscribe
</xmp>
</pre>
</div>


<h2 id="connect-your-first-light-authors">Guest Article</h2>

<p>
This article is brought to life from the guys at <a href="http://www.fungostudios.com/">FunGo Studios</a>.
</p>

<a href="http://www.fungostudios.com/">
  <%= image_tag('collaborators/fungostudios.png', class: 'img-thumbnail') %>
</a>


<h2 id="arduino-connect-your-first-light-feedback"><span class="glyphicon glyphicon-comment"></span> Feedback</h2>

<%= render 'shared/feedback' %>
