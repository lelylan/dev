<h2 id="connect-your-first-light-introduction">Introduction</h2>

<%= image_tag('connect-your-first-light/arduino/overview.jpg', class: 'img-thumbnail') %>

<p>
  This tutorial will show you how to control and monitor a simple light by connecting an
  Arduino Ethernet to Lelylan using <a href="http://mqtt.org/" target="blank">MQTT</a>,
  a publish/subscribe messaging protocol enabling your Arduino to receive and send
  messages in a simple and transparent way.
</p>

<h2 id="connect-your-first-light-components">Components</h2>

<p>
  To connect your first light you need an Arduino Ethernet or an Arduino UNO with
  an Ethernet shield. Follows a list with the needed components to reach the final
  result.
<p>

<table class="table table-stripped table-hover">
  <thead>
    <tr>
      <th>Components</th>
      <th>Buy</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://arduino.cc/en/Main/arduinoBoardUno">Arduino Ethernet</a></td>
      <td><a href="http://store.arduino.cc/it/index.php?main_page=product_info&cPath=11&products_id=197">Arduino Store</a></td>
      <td>$52.00</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/97">Push button </a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/9590">Any led</a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/8374">10K Ohm resistor </a></td>
      <td><a href="https://www.sparkfun.com/products/10969">Resistor kit</a></td>
      <td>$0.25</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-libraries">Libraries</h2>

<p>
To program your Arduino you need to install the <a href="http://arduino.cc/en/main/software">Arduino IDE</a>
and the following libraries (if you do not know how to install a library checkout this
<a href="http://arduino.cc/en/Guide/Libraries">tutorial</a>).
</p>

<table class="table table-stripped">
  <thead>
    <tr>
      <th>Library</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/andreareginato/pubsubclient">PubSubClient</a></td>
      <td>
        This is a fork of the <a href="https://github.com/knolleary/pubsubclient">original</a>
        PubSubClient setting the <a href="http://knolleary.net/client-for-mqtt/api/#configoptions">max packet size</a>
        to 512 bytes
      </td>
    </tr>
    <%#<tr>%>
      <%#<td><a href="https://github.com/interactive-matter/aJson">aJSON</a></td>%>
      <%#<td>A library to easily create and parse JSON</td>%>
    <%#</tr>%>
  </tbody>
</table>


<h2 id="connect-your-first-light-hardware-setup">Hardware Setup</h2>

<p>
This example demonstrates the use of a pushbutton as a switch. Each time you press
the button, the LED is turned on (if it's off) or off (if on).
</p>

<%= image_tag('connect-your-first-light/arduino/components.png', class: 'img-thumbnail') %>


<h2 id="connect-your-first-light-lelylan-setup">Lelylan Setup</h2>

<p>
To create a new device open the <a href="http://manage.lelylan.com">Dashboard</a>.
Click the <a href="http://manage.lelylan.com/new">create device</a> link and fill the
form with the desired device name and choosing <code>Basic Light</code> as type.
<p>

<a href="http://manage.lelylan.com/new">
  <%= image_tag('connect-your-first-light/create-device.png', class: 'img-thumbnail') %>
</a>

<p>
When created, you'll see a detailed view of your new device. Click on <code>settings</code>
and you'll find all needed info to connect your hardware to Lelylan.
</p>

<ul>
  <li><code>Type</code> - Link to the type definition (to see the device properties).</li>
  <li><code>ID</code> - Unique device identifier.</li>
  <li><code>Secret</code> - Device secret code used to authenticate the communication with Lelylan.</li>
</ul>

<h3>Connect Lelylan to the Physical World</h3>

<p>
To communicate with the physical device you need to connect Lelylan with the
MQTT client. To make this possible use the <em>Nodes Service</em>,
which is in charge of forwarding all incoming requests from Lelylan to
the MQTT client.
</p>

<p>
To use the Nodes Service you need to set in the physical
field of your device a URI having the structure
<code>http://nodes.lelylan.com/mqtt/devices/&lt;device-id&gt;</code>,
where you need to change the <code>&lt;device-id&gt;</code> with your
actual device id.
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td>Your Device ID</td>
      <td><code>518be5a700045e1521000001</code></td>
    </tr>
    <tr>
      <td>Your Physical URI</td>
      <td><code><span class="glyphicon glyphicon-arrow-right"></span> http://nodes.lelylan.com/mqtt/devices/518be5a700045e1521000001</code></td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-code">Arduino Code</h2>

<p>
Here is the Arduino sketch. To make it work set the <code>deviceId</code>
and the <code>deviceSecret</code> to your device credentials, upload the
sketch and connect it to the Internet. For further
instructions see the <a href="#connect-your-first-light-code-explained">Code Explained</a> section.
</p>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  In order to make this sketch work you need to set the deviceId, deviceSecret, outTopic, inTopic
  and clientId. To get all the needed information access the device settings section.
  </p>
</div>

<div class="code-block">
<pre class="prettyprint"><xmp>#include <SPI.h>
#include <Ethernet.h>
#include <PubSubClient.h>

/* Device credentials */
char* deviceId = "<DEVICE-ID>"; // set your device id (will be the MQTT client username)
char* deviceSecret = "<DEVICE-SECRET>"; // set your device secret (will be the MQTT client password)

/* Device topics */
char* outTopic = "devices/<DEVICE-ID>/set"; // where physical updates are published
char* inTopic = "devices/<DEVICE-ID>/get";  // where lelylan updates are received

/* Access settings */
byte server[] = { 96, 126, 109, 170 }; // MQTT server address
char* clientId = "<CLIENT-ID>"; // MQTT client id (random, max 23 bytes)

/* Sample payload published to lelylan */
/* Status-id is the basic light status id (http://types.lelylan.com/types/518be107ef539711af000001) */
char* payloadOn  = "{\"properties\":[{\"id\":\"518be5a700045e1521000001\",\"value\":\"on\"}]}";
char* payloadOff = "{\"properties\":[{\"id\":\"518be5a700045e1521000001\",\"value\":\"off\"}]}";

/* Ethernet configuration */
byte mac[] = { 0xA0, 0xA0, 0xBA, 0xAC, 0xAE, 0x12 };
EthernetClient ethClient;

/* MQTT communication */
void callback(char* topic, byte* payload, unsigned int length); // subscription callback
PubSubClient client(server, 1883, callback, ethClient);         // mqtt client

/* Pins configuration */
int inPin = 2; // button
int outPin = 4; // led

/* Button and led logics */
int state = HIGH;     // current state of the output pin
int reading;          // current reading from the input pin
int previous = LOW;   // previous reading from the input pin
long time = 0;        // the last time the output pin was toggled
long debounce = 200;  // the debounce time, increase if the output flickers

/* arduino setup */
void setup() {
  Serial.begin(9600);
  delay(500);

  Ethernet.begin(mac);
  Serial.print("Connected with IP: ");
  Serial.println(Ethernet.localIP());

  lelylanConnection();      // MQTT server connection
  pinMode(inPin, INPUT);    // button pin setup
  pinMode(outPin, OUTPUT);  // led pin setup
}

/* arduino loop */
void loop() {
  lelylanConnection();

  char* value;
  reading = digitalRead(inPin);  // read the button state

  // if the input just went from LOW and HIGH and we've waited long enough to ignore
  // any noise on the circuit, toggle the output pin and remember the time
  if (reading == HIGH && previous == LOW && millis() - time > debounce) {
    if (state == LOW) {
      Serial.println("[PHYSICAL] Led turned on");
      lelylanPublish("on");
      state = HIGH;
    } else {
      Serial.println("[PHYSICAL] Led turned off");
      lelylanPublish("off");
      state = LOW;
    }

    time = millis();
  }

  // effectively update the light status
  digitalWrite(outPin, state);
  previous = reading;
}

/* MQTT server connection */
void lelylanConnection() {
  // add reconnection logics
  if (!client.connected()) {
    // connection to MQTT server
    if (client.connect(clientId, deviceId, deviceSecret)) {
      Serial.println("[PHYSICAL] Successfully connected with MQTT");
      lelylanSubscribe(); // topic subscription
    }
  }
  client.loop();
}

/* MQTT publish */
void lelylanPublish(char* value) {
  if (value == "on")
    client.publish(outTopic, payloadOn); // light on
  else
    client.publish(outTopic, payloadOff); // light off
}

/* MQTT subscribe */
void lelylanSubscribe() {
  client.subscribe(inTopic);
}

/* Receive Lelylan message and confirm the physical change */
void callback(char* topic, byte* payload, unsigned int length) {
  // copu the payload content into a char*
  char* json;
  json = (char*) malloc(length + 1);
  memcpy(json, payload, length);
  json[length] = '\0';

  // update the physical status and confirm the executed update
  if (String(payloadOn) == String(json)) {
    Serial.println("[LELYLAN] Led turned on");
    lelylanPublish("on");
    state = HIGH;
  } else {
    Serial.println("[LELYLAN] Led turned off");
    lelylanPublish("off");
    state = LOW;
  }

  digitalWrite(outPin, state);
  free(json);
}</xmp></pre>
</div>

<h2 id="connect-your-first-light-control">Control your light</h2>

<p>
  Now that all the components are ready and your Arduino is connected to Lelylan
  access the <a href="http://manage.lelylan.com">Lelylan Dashboard</a>. From here you can control your light
  and get realtime notifications.
</p>

<a href="http://manage.lelylan.com">
<%= image_tag('connect-your-first-light/dashboard.png', class: 'img-thumbnail') %>
</a>

<h2 id="connect-your-first-light-code-explained">Code Explained</h2>

<p>
To better understand how the Arduino sketch works we'll give you a brief
description of what the most important code sections do.
</p>

<h3>Device Credentials</h3>

<p>
  The <code>deviceId</code> and <code>deviceSecret</code> are used to let the Arduino
  rduino understand which one is the communicating device on Lelylan. To get the device
  credentials open the <a href="http://manage.lelylan.com">Dashboard</a>, select the
  desired device, click on settings and copy the Device ID and the Device Secret.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>char* deviceId = "<DEVICE-ID>"; // set your device id (will be the MQTT client username)
char* deviceSecret = "<DEVICE-SECRET>"; // set your device secret (will be the MQTT client password)</xmp></pre>
</div>

<h3>MQTT Topics</h3>

<p>
  To communicate with Lelylan, Arduino must set the <code>inTopic</code> (used to receive
  messages from Lelylan) and the <code>outTopic</code> (used to publish messages to Lelylan).
  Remember to set your device id.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>char* outTopic = "devices/<DEVICE-ID>/set"; // where physical updates are published
char* inTopic = "devices/<DEVICE-ID>/get";  // where lelylan updates are received</xmp></pre>
</div>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  To deeply understand how MQTT works check out the <a href="/makers#mqtt">MQTT API</a>.
  </p>
</div>

<h3>MQTT Access Settings</h3>

<p>
  Set the Lelylan MQTT server IP where to connect and a MQTT client ID, a random string not
  longer than 23 bytes used to identify your Arduino.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>byte server[] = { 96, 126, 109, 170 }; // MQTT server address
char* clientId = "<CLIENT-ID>"; // MQTT client id (random, max 23 bytes)</xmp></pre>
</div>

<h3>JSON Payloads</h3>

<p>
  When communicating with Lelylan we use a fixed JSON structure. For this basic example we
  defined the JSON to turn the light on and the JSON to turn the light off.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>char* payloadOn  = "{\"properties\":[{\"id\":\"518be5a700045e1521000001\",\"value\":\"on\"}]}";
char* payloadOff = "{\"properties\":[{\"id\":\"518be5a700045e1521000001\",\"value\":\"off\"}]}";</xmp></pre>
</div>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  To properly generete and parse JSON you can use the <a href="https://github.com/interactive-matter/aJson">aJSON library</a>.
  We tried to, but we had several problems with the memory management. If you make it work let
  <a href="http://lelylan.com/lelylan">@lelylan</a> know on Twitter.
  </p>
</div>

<p>
  When receiving a message from Lelylan you get an array of properties, where each property is
  identified from its ID. For a <a href="http://types.lelylan.com/types/518be107ef539711af000001">Basic Light</a>
  the status id is 518be5a700045e1521000001. To get your device property IDs go into the device
  settings and click the <em>Type</em> link. It will send you to the type definition which is the
  base of your device structure and where you can see all the type properties.
</p>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  To deeply understand how Types works check out the <a href="/types">Types API</a>.
  </p>
</div>


<h3>MQTT Signatures</h3>

<p>
  To communicate with Lelylan Arduino needs to initialize the MQTT client
  connecting to the MQTT server. The needed params to make this initialization are
  the MQTT server address, the MQTT server port, a callback function called every
  time a message is received from Lelylan and the ethernet client.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void callback(char* topic, byte* payload, unsigned int length); // subscription callback
PubSubClient client(server, 1883, callback, ethClient); // mqtt client</xmp></pre>
</div>

<h3>Led and Button Pins</h3>

<p>
  Those are the pins used to connect the led and the button. If you have followed the
  <a href="#connect-your-first-light-hardware-setup">Fritzing diagram</a> you don't have to change
  anything. If you used different pins, remember to change those values.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>int inPin = 2; // button
int outPin = 4; // led</xmp></pre>
</div>

<h3>Led and Button Logics</h3>

<p>
  Here we define all needed variables to make the button correctly work. If you are new to
  pushbuttons check out the <a href="http://www.arduino.cc/en/Tutorial/Switch">Arduino tutorial</a>.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>int state = HIGH;     // current state of the output pin
int reading;          // current reading from the input pin
int previous = LOW;   // previous reading from the input pin
long time = 0;        // the last time the output pin was toggled
long debounce = 200;  // the debounce time, increase if the output flickers</xmp></pre>
</div>



<h3>Arduino Setup</h3>

<p>
  During the Arduino setup Arduino connects to Lelylan MQTT server and set the
  pin mode for the led and the button pins. Before, it connects to the Internet
  using DHCP.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void setup() {
  Serial.begin(9600);
  delay(500);

  Ethernet.begin(mac);
  Serial.print("Connected with IP: ");
  Serial.println(Ethernet.localIP());

  lelylanConnection();      // MQTT server connection
  pinMode(inPin, INPUT);    // button pin setup
  pinMode(outPin, OUTPUT);  // led pin setup
}</xmp></pre>
</div>

<h3>Arduino Loop</h3>

<p>
We use of a pushbutton as a switch: each time you press the button the led is
turned on or off. It also debounces the input, without which pressing the button
once would appear to the code as multiple presses. Once the led state changes,
Arduino publishes a message to Lelylan about the updates.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void loop() {
  lelylanConnection();
  char* value;
  reading = digitalRead(inPin);

  // if the input just went from LOW and HIGH and we've waited long enough to ignore
  // any noise on the circuit, toggle the output pin and remember the time
  if (reading == HIGH && previous == LOW && millis() - time > debounce) {
    if (state == LOW) {
      Serial.println("[PHYSICAL] Led turned on");
      lelylanPublish("on");
      state = HIGH;
    } else {
      Serial.println("[PHYSICAL] Led turned off");
      lelylanPublish("off");
      state = LOW;
    }
    time = millis();
  }

  // effectively update the light status
  digitalWrite(outPin, state);
  previous = reading;
}</xmp></pre>
</div>

<h3>MQTT connection</h3>

<p>
During the connection phase the client needs to set the <code>deviceId</code>
as username and the <code>deviceSecret</code> as password. When the credentials
are missing or not valid, the connection is rejected.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void lelylanConnection() {
  // add reconnection logics
  if (!client.connected()) {
    // connection to MQTT server
    if (client.connect(clientId, deviceId, deviceSecret)) {
      Serial.println("[PHYSICAL] Successfully connected with MQTT");
      lelylanSubscribe(); // topic subscription
    }
  }
  client.loop();
}</xmp></pre>
</div>

<p>
  To keep the connection alive after temporary loss of internet connection we
  check if the client is connected. When not, Arduino reconnects to Lelylan. This
  is why the <code>lelylanConnection</code> method is used in the loop function.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void loop() {
  // reconnection logics
  lelylanConnection();
  // ...</xmp></pre>
</div>

<h3>Publish Messages to Lelylan</h3>

<p>
  To notify the execution of a request or to notify a light status update
  Arduino needs to publish a message to the topic <code>devices/:id/set</code> with the list
  all of updated properties.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void lelylanPublish(char* value) {
  if (value == "on")
    client.publish(outTopic, payloadOn);  // light is on
  else
    client.publish(outTopic, payloadOff); // light is off
}</xmp></pre>
</div>

<p>
Every published message is made up from a list of properties.
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to send to Lelylan.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Desired property value.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.expected</span>
        <span class="info">optional</span>
      </td>
      <td>
        Expected property value.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.pending</span>
        <span class="info">optional</span>
      </td>
      <td>
        Property pending status.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
        <span class="info">Valid values: true, false.</span>
      </td>
    </tr>
  </tbody>
</table>


<h3>Receive Messages from Lelylan</h3>

<p>
When a user updates a device property or executes a function using Lelylan
(e.g from dashboard, mobile, etc.), a message is published to the topic
<code>devices/:id/get</code>. The physical device (that subscribed to this
channel during the connection phase) will receive all incoming messages through
the <code>callback</code> function (defined during the MQTT client initialization).
</p>

<p>
To correctly apply a command to our light we need to check the value for the status
property, turning it on or off. Once the led state is updated a confirmation message
needs to be published to Lelylan telling it that the new properties has been
successfully updated in the physical world.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void callback(char* topic, byte* payload, unsigned int length) {
  // copu the payload content into a char*
  char* json;
  json = (char*) malloc(length + 1);
  memcpy(json, payload, length);
  json[length] = '\0';

  // update the physical status and confirm the executed update
  if (String(payloadOn) == String(json)) {
    Serial.println("[LELYLAN] Led turned on");
    lelylanPublish("on");
    state = HIGH;
  } else {
    Serial.println("[LELYLAN] Led turned off");
    lelylanPublish("off");
    state = LOW;
  }

  digitalWrite(outPin, state);
  free(json);
}</xmp></pre>
</div>

<p>
Every received message is made up from a list of properties each of them containing
the property ID and the property value to change.
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
      </td>
      <td>
        Array of properties to send to Lelylan.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
      </td>
      <td>
        New property value.
      </td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-problems">Possible Problems</h2>

<ul>
  <li>
  <em>Message Size</em> -
  Using Lelylan your messages are usually bigger than 128 bytes. For this reason we
  <a href="https://github.com/andreareginato/pubsubclient">forked</a> the
  original PubSubClient setting the <a href="http://knolleary.net/client-for-mqtt/api/#configoptions">max packet size</a>
  to 512 bytes.
  </li>
  <li>
  <em>Memory Usage</em> -
  Arduino doesn't have that much memory. Take care of it and free all variables you have used.
  If not, your Arduino will restart to get back the needed memory. A nice library to check
  the memory consumption out is <a href="http://playground.arduino.cc/Code/AvailableMemory">MemoryFree</a>.
  </li>

</ul>

<h2 id="connect-your-first-light-feedback"><span class="glyphicon glyphicon-comment"></span> Feedback</h2>

<%= render 'shared/feedback' %>
